/*
 * ndreg.ic: register of pointers known to amalloc. Included by amalloc.c.
 *                                                                    
 * int ndreg_add(ndreg_ptr_t ptr, ndreg_int* clue); 
 *
 *   Registers a pointer.  Returns a clue to where to find 'ptr' in
 *   '*clue'.  Returns NDREG_SUCCESS if the addition was successful,
 *   and NDREG_FAILURE if it was not.
 *
 * int ndreg_remove(ndreg_ptr_t pointer, ndreg_int clue);
 *   Removes the pointer-value pair associated with 'ptr'.  Pass in a
 *   clue that was given by ndreg_add() for faster lookup, or '0'.
 *   Returns NDREG_SUCCESS if pair is removed and 1 if 'pointer' was
 *   not found.
 *
 * int ndreg_lookup(ndreg_ptr_t pointer, ndreg_int* clue); 
 *   Checks if 'ptr' was registerd.  Pass in clue given by ndreg_add()
 *   for faster lookup. Returns NDREG_SUCCESS if pointer is found,
 *   NDREG_FAILURE if it is not. Updates clue for faster repeated
 *   lookups.
 *
 * (C) Copyright 2013 Ramses van Zon
 */

#include <string.h>                   /* for memmove and memcpy       */
#include <stdlib.h>                   /* for malloc and realloc       */

/* NDREG_INT sets both ndreg_int and ndreg_index_t */
#ifndef NDREG_INT
#define NDREG_INT unsigned int
#endif

typedef const void* ndreg_ptr_t;       /* store constant pointers only */
typedef NDREG_INT    ndreg_int;        /* use clues for faster lookup  */

#define NDREG_NOCLUE   ((ndreg_int)0)  /* error/ignorance              */
#define NDREG_SUCCESS   0              /* function call successful     */
#define NDREG_FAILURE   1              /* an error occurred            */
#define NDREG_NOT_FOUND 2              /* entry not found              */

/* For the routines to be thread safe, use pthreads or openmp locks.  */

#if defined(NDREG_PTHREAD_LOCK)
  #include <pthread.h>    
  static pthread_mutex_t ndreg_mutex = PTHREAD_MUTEX_INITIALIZER;
#elif defined(_OPENMP)
  #ifndef NDREG_OPENMP_LOCK
  #define NDREG_OPENMP_LOCK
  #endif
  #include <omp.h>               
  static omp_lock_t ndreg_mutex;
#else
  #ifdef NDREG_OPENMP_LOCK
  #error Compilation does not support openmp
  #else
  #warning Lockless implementation: not thread-safe.
  #endif
#endif


/* Pointers are stored in a resizeable array. */

#define nregmaxinit 512
#define nreginc     512

static ndreg_int    nregmax = nregmaxinit;
static ndreg_int    nreg    = 0;
static ndreg_ptr_t   keyreginit[nregmaxinit];
static ndreg_ptr_t*  keyreg  = keyreginit;

/**********************************************************************/

static
int internal_ndreg_find(ndreg_ptr_t key, ndreg_int clue, ndreg_int* index)
{
 /* Find the index where 'key' is stored, starting at position 'clue'
    (or at nreg/2 if clue=NDREG_NOCLUE). If found, stores the index in
    'index' and returns NDREG_SUCCESS, if not found, stores the
    insertion point in 'index' and returns NDREG_NOT_FOUND.  Upon
    error, it returns NDREG_FAILURE. */

    ndreg_int start, lowi, midi, highi;
    
    /* index must point somewhere */
    if (index == NULL) 
        return NDREG_FAILURE; 

    /* check clue first */
    if (0<=clue && clue < nreg && keyreg[clue] == key) {
        *index = clue;
        return NDREG_SUCCESS;
    }

    /* ensure start is reasonable */
    start = clue;
    if (start == NDREG_NOCLUE) 
        start = nreg/2;
    else if (nreg!=0 && start >= nreg) 
        start = nreg-1;

    /* the binary search algorithm below assumes lowi<highi, so we first
       need to catch corner cases: empty list, list of 1 */
    if (nreg==0) {
        *index = 0;
        return NDREG_NOT_FOUND;
    } else if (nreg==1) {
        if (key > keyreg[0])
            *index = 1;
        else
            *index = 0;
        if (keyreg[*index] == key)
            return NDREG_SUCCESS;
        else
            return NDREG_NOT_FOUND;
    } 

    /* it also assumes key lies between keyreg[0] and keyreg[nreg-1],
       so check if it is out of range first */
    if (key <= keyreg[0]) {
        *index = 0;
        if (keyreg[0] == key)
            return NDREG_SUCCESS;
        else
            return NDREG_NOT_FOUND;
    }

    if (keyreg[nreg-1] <= key) {
        if (keyreg[nreg-1] == key) {
            *index = nreg-1;
            return NDREG_SUCCESS;
        } else {
            *index = nreg;
            return NDREG_NOT_FOUND;
        }
    }

    /* setup binary search */
    lowi = 0;
    midi = start;    
    highi = nreg-1;   

    /* check the mid point first */
    if (keyreg[midi] == key) {
        *index = midi;
        return NDREG_SUCCESS;
    }
    /* we get here if reg[lowi].key < key < reg[highi].key */
    /* start bisection */
    while (highi-lowi>1) {
        if (keyreg[midi] <= key ) 
            lowi = midi;
        else
            highi = midi;
        midi = (highi+lowi)/2;
        if (keyreg[midi] == key ) {
            *index = midi;
            return NDREG_SUCCESS;
        }
    }
    /* if we get here, highi is the insertion point*/
    *index=highi;
    return NDREG_NOT_FOUND;
}

/**********************************************************************/

static
void internal_lock_on()
{
    #ifdef NDREG_PTHREAD_LOCK
    pthread_mutex_lock(&ndreg_mutex);
    #elif defined(NDREG_OPENMP_LOCK)
    static int ndreg_mutex_initialized = 0;
    if (ndreg_mutex_initialized) {
        omp_set_lock(&ndreg_mutex);
    } else {
        ndreg_mutex_initialized = 1;
        omp_init_lock(&ndreg_mutex);
        omp_set_lock(&ndreg_mutex);
    }
    #endif
}

/**********************************************************************/

static
void internal_lock_off()
{
    #ifdef NDREG_PTHREAD_LOCK
    pthread_mutex_unlock(&ndreg_mutex);
    #elif defined(NDREG_OPENMP_LOCK)
    omp_unset_lock(&ndreg_mutex);
    #endif
}

/**********************************************************************/

static
int ndreg_add(ndreg_ptr_t key, ndreg_int* clue) 
{
 /* Add a key and return a clue to where to find the key. Returns
    an error code, which is 0 if the addition was successful. If
    clue==NULL, no clue is given. */

    ndreg_int  index  = 0;
    int           exitcode = NDREG_FAILURE;
    int           notpresent;
    ndreg_ptr_t*   newkeyreg;
   
    if (key == NULL)
        return NDREG_FAILURE;

    internal_lock_on();

    /* check if we need to augment the registry */
    if (nreg == nregmax) { 
        
        if (nregmax == nregmaxinit) {
            newkeyreg = malloc((nregmaxinit+nreginc)*sizeof(ndreg_ptr_t));
            if (newkeyreg!=NULL) 
                memcpy(newkeyreg, keyreg, nregmaxinit*sizeof(ndreg_ptr_t));
        } else           
            newkeyreg = realloc(keyreg,(nregmax+nreginc)*sizeof(ndreg_ptr_t));

        if (newkeyreg == NULL) {           
            internal_lock_off();
            return NDREG_FAILURE;
        }
        keyreg = newkeyreg;
        nregmax += nreginc;
    }

    /* find the ordered spot (gets put in index) */
    notpresent = ( internal_ndreg_find(key, NDREG_NOCLUE, &index) 
                   == NDREG_NOT_FOUND ); /* must not be found */
    if (notpresent) {
        /* index given nu internal_ndreg_find holds insertion point */
        /* clear the spot */
        if (index<nreg)
            memmove(keyreg+index+1, keyreg+index, (nreg-index)*sizeof(ndreg_ptr_t));
        nreg++;
        /* put it there */
        keyreg[index]=key;
        exitcode = NDREG_SUCCESS;
    }


    if (clue != NULL) {
        if (exitcode != NDREG_SUCCESS) 
            *clue = NDREG_NOCLUE;
        else 
            *clue = index;
    }

    internal_lock_off();

    return exitcode;
}

/**********************************************************************/

static
int ndreg_remove(ndreg_ptr_t key, ndreg_int clue) 
{
 /* Remove the key 'key'.  Pass in a clue that was given by ndreg_add()
    for faster lookup.  Returns 0 if 'key' was removed and 1 if 'key'
    was not found. */

    int           exitcode;
    ndreg_int  index;

    internal_lock_on();

    exitcode = internal_ndreg_find(key, clue, &index);

    if (exitcode == NDREG_SUCCESS && index < nreg) {

        if (index < nreg-1)  
            memmove(keyreg+index, keyreg+index+1, 
                    (nreg-index-1)*sizeof(ndreg_ptr_t));
        nreg--;
    }    

    /* check if we can shrink the registry ?*/
    if (nreg < nregmax-(7*nreginc)/6)  {  /* can we spare the room? */

        if (nregmax > nregmaxinit+nreginc) {

            /* We just have to reallocate the buffer */
            /* - determine the new maximum number of registrants */
            ndreg_int newnregmax = nregmax-nreginc; 

            /* - perform the reallocation */
            ndreg_ptr_t* newkeyreg = realloc(keyreg, 
                                            newnregmax*sizeof(ndreg_ptr_t));
            /* - check if successfull */
            if (newkeyreg != NULL) {
                /* - if so, reset the number of registrants */
                nregmax = newnregmax;
                /*   and the reg pointer */
                keyreg = newkeyreg;
            }

        } else if (nregmax == nregmaxinit+nreginc) {

            /* We get here if we have to shrink to initial buffer */
            /* - copy everything back to that initial buffer */
            memcpy(keyreginit, keyreg, nreg*sizeof(ndreg_ptr_t));

            /* - release memory taken by newer buffer */
            free(keyreg);

            /* - set the maximum number of registrants back */
            nregmax = nregmaxinit;

            /* - point the reg pointer back to the initial buffer */
            keyreg = keyreginit;
        }
    }

    internal_lock_off();

    return exitcode;
}

/**********************************************************************/

static
int ndreg_lookup(ndreg_ptr_t key, ndreg_int* clue) 
{
 /* Looks for 'key'.  Pass in clue given by ndreg_add() for faster
    ndreg_lookup. Returns NDREG_FAILURE if key is not found. */

    int        exitcode;
    ndreg_int  index;

    if (key == NULL) 
        return NDREG_FAILURE;
    exitcode = internal_ndreg_find(key, *clue, &index);
    if (exitcode == NDREG_SUCCESS)
        *clue = index;
    return exitcode==NDREG_SUCCESS?NDREG_SUCCESS:NDREG_FAILURE;
}

/**********************************************************************/

#ifdef O_NDREGTEST
/**********************************************************************/
/*                                                                    */
/*  Test code for a register of pointers that are known to amalloc    */
/*                                                                    */
/**********************************************************************/

#define NDREG_CHECK(x) if(x)fprintf(stderr,"Warning ("__FILE__":%d): '"#x"' failed!\n",__LINE__);

#include <stdio.h>
void ABC() 
{
    size_t i;
    for (i = 0; i < nreg; i++) {
        printf("%p\n", keyreg[i]);
    }
    printf("*****************\n");
}



int main()
{
    int i;
    int  a=1;
    int  c=3;
    int* pa = &a;
    int* pc = &c;
    int* p=NULL;
    ndreg_int cluea;
    ndreg_int cluec;

    ABC();

    NDREG_CHECK(  ndreg_add(pa, &cluea)  );
    ABC();
    NDREG_CHECK(  ndreg_add(pc, &cluec)  );
    ABC();

    NDREG_CHECK(  ndreg_remove(pc, cluec)   );
    NDREG_CHECK(  ndreg_remove(pc, NDREG_NOCLUE)  );
    ABC();

    #define nnumbers 1010000
    int x[nnumbers];
    int y[nnumbers];
    for (i=0;i<nnumbers;i++) {
        x[i]=i; y[i]=1000+i;
        if (i!=3) {
            NDREG_CHECK(  ndreg_add(x+i,NULL)  );
        }
    }
    i=3;
    NDREG_CHECK(  ndreg_add(x+i,NULL)  );

    i=3;
    NDREG_CHECK(  ndreg_add(x+i,NULL)  );

    NDREG_CHECK(  ndreg_lookup(pa, &cluea)  );

    return p?*p:cluec*y[0];
}

#endif
