#include "shape.h"
#include "shapeauto.h"

// Six different signatures of a print function for a tensor: 

// print_1 takes a double-pointer tensor, whose elements and row
// pointers could be changed. Dangerous.
// - Not const-correct, but common in non-const (often C) libraries.  
// - Will require a call to no_const
void print_1(float***a, int n, int m, int l);

// print_2 takes a tensor whose elements are constant, but whose row
// pointers could in principle be changed. Dangerous, but common!
// - Not const-correct.
// - Requires a mid_const_cast of a shapeal 3d array
void print_2(const float***a, int n, int m, int l);

// print_3 takes a tensor, which is a pointer to a set of pointers. The
// row pointers are constant, but the elements would be changable.
// - Not (logically) const-correct.
// - A non-const shaped 3d array can be passed right in.
void print_3(float *const*const* a, int n, int m, int l);

// print_4 takes a constant tensor, as a set of pointers to rows. Both
// the row pointers and the elements are const, and can't be changed.
// - Const-correct.
// - A const shaped 3d array can be passed right in.
void print_4(const float*const*const*a, int n, int m, int l);

// print_5 wants the tensor as a contiguous memory block.
// because of const, print_5 cannot change the elements of a. 
// Dangerous, and very common.
// - Not (logically) const-correct
// - Requires a const-cast.
void print_5(float *a, int n, int m, int l);

// print_6 wants the constant tensor as a contiguous memory block.
// because of const, print_6 cannot change the elements of a. 
// - Const-correct
// - A const shapeal 3d array can be passed right in.
void print_6(const float *a, int n, int m, int l);

// print_7 takes the wrapper 3d class, which already contains its dimensions
// because of const, print_7 cannot change the elements of a.
// - Const-correct.
// - A non-const shaped 3d array can, of course, be passed right in.
void print_7(const Shape<float,3> &a);

// (implementations at the end)

/////////////////////////////////////////////////////////

#include <iostream>
using std::cout;
using std::endl;

int main() 
{
    const int n = 9;
    const int m = 5;
    const int l = 2;
    float* elements = new float[m*n*l];
    Shape<float,3> a(elements,n,m,l);

    for (int i=0;i<n;i++)
      for (int j=0;j<m;j++)
        for (int k=0;k<l;k++)
          a[i][j][k]=((i+1)*10+j+1)*10+k+1;
    
    const Shape<float,3>& c=a; // note the const: not enough

    const Shape<float,3>* pa = &a;
  //print_1(c, c.extent(0), c.extent(1), c.extent(2)); //won't work, one needs:
    print_1(c.cptr(), c.extent(0), c.extent(1), c.extent(2)); 
 // print_2(c, c.extent(0), c.extent(1), c.extent(2)); won't work, one needs:
    print_2(c.cref().cptr(), c.extent(0), c.extent(1), c.extent(2)); 
    print_3(c.ptr(), c.extent(0), c.extent(1), c.extent(2)); 
    print_4(c.ptr(), c.extent(0), c.extent(1), c.extent(2));
 // print_5(c, c.extent(0), c.extent(1), c.extent(2)); won't work, one needs
    print_5(c.data(), c.extent(0), c.extent(1), c.extent(2));
    print_6(c.data(), c.extent(0), c.extent(1), c.extent(2));
    print_7(c);

    delete[] elements;

    float b[n][m][l];

    for (int i=0;i<n;i++)
      for (int j=0;j<m;j++)
        for (int k=0;k<l;k++)
          b[i][j][k]=((i+1)*10+j+1)*10+k+1;

 // print_1(b,n,m,l);  // won't compile
 // print_2(b,n,m,l);  // won't compile
 // print_3(b,n,m,l);  // won't compile
 // print_4(b,n,m,l);  // won't compile
 // print_5(b,n,m,l);  // won't compile
 // print_6(b,n,m,l);  // won't compile
 // print_7(b);  // won't compile
 // But one can insist by conversion to shape:
    print_1(make_shape(b).cptr(),n,m,l);
    print_2(make_shape(b).cref().cptr(),n,m,l);
    print_3(make_shape(b).ptr(),n,m,l);
    print_4(make_shape(b).ptr(),dim_shape(b,0),dim_shape(b,1),dim_shape(b,2));
 // Note: these automatically get unconverted to a double pointer!
 // The contiguous version are easier:
    print_5(b[0][0],n,m,l);
    print_6(b[0][0],n,m,l);
 // And print_7 expects a shape2d, so needs conversion:
    print_7(make_shape(b));
}

/////////////////////////////////////////////////////////
void print_1(float***a, int n, int m, int l) 
{
    for (int i=0;i<n;i++) {
      for (int j=0;j<m;j++) {
        for (int k=0;k<l;k++) 
          cout << a[i][j][k] << ' ';
        cout << "      \t";
      }
      cout << endl;
    }
    cout << endl;
}
/////////////////////////////////////////////////////////
void print_2(const float***a, int n, int m, int l) 
{
    for (int i=0;i<n;i++) {
      for (int j=0;j<m;j++)  {
        for (int k=0;k<l;k++) 
          cout << a[i][j][k] << ' ';
        cout << "      \t";
      }
      cout << endl;
    }
    cout << endl;
}
/////////////////////////////////////////////////////////
void print_3(float *const*const*const a, int n, int m, int l) 
{
    for (int i=0;i<n;i++) {
      for (int j=0;j<m;j++)  {
        for (int k=0;k<l;k++) 
          cout << a[i][j][k] << ' ';
        cout << "      \t";
      }
      cout << endl;
    }
    cout << endl;
}
/////////////////////////////////////////////////////////
void print_4(const float*const*const*a, int n, int m, int l) 
{
    for (int i=0;i<n;i++) {
      for (int j=0;j<m;j++) {
        for (int k=0;k<l;k++) 
          cout << a[i][j][k] << ' ';
        cout << "      \t";
      }
      cout << endl;
    }
    cout << endl;
}
/////////////////////////////////////////////////////////
void print_5(float *a, int n, int m, int l) 
{
    for (int i=0;i<n;i++) {
      for (int j=0;j<m;j++) {
        for (int k=0;k<l;k++) 
          cout << a[(i*m+j)*l+k] << ' ';
        cout << "      \t";
      }
      cout << endl;
    }
    cout << endl;
    ;}
/////////////////////////////////////////////////////////
void print_6(const float *a, int n, int m, int l) 
{
    for (int i=0;i<n;i++) {
      for (int j=0;j<m;j++) {
        for (int k=0;k<l;k++) 
          cout << a[(i*m+j)*l+k] << ' ';
        cout << "      \t";
      }
      cout << endl;
    }
    cout << endl;
}
/////////////////////////////////////////////////////////
void print_7(const Shape<float,3> &a) 
{
  for (int i=0;i<a.extent(0);i++) {
    for (int j=0;j<a.extent(1);j++) {
      for (int k=0;k<a.extent(2);k++) 
        cout << a[i][j][k] << ' ';
      cout << "      \t";
    }
    cout << endl;
  }
  cout << endl;
}
/////////////////////////////////////////////////////////
